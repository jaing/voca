{"version":3,"sources":["components/list-of-words.js","components/add-word.js","components/summary.js","components/quiz.js","App.js","index.js"],"names":["ListOfWords","words","onRemove","Table","celled","striped","Header","Row","HeaderCell","width","Body","length","Cell","colSpan","map","word","native","foreign","Button","basic","color","content","animated","onClick","Content","hidden","visible","Icon","name","Footer","AddWord","onAdd","useState","setNative","setForeign","nativeError","setNativeError","foreignError","setForeignError","Form","onSubmit","pointing","Group","Input","error","placeholder","value","onChange","event","target","primary","Summary","answers","onClose","allCorrect","every","answer","correct","Modal","image","Description","Message","positive","negative","key","Actions","Quiz","step","setStep","setAnswers","displayQuestions","Progress","style","marginBottom","total","progress","indicating","Field","label","stateCopy","setAnswerValue","App","state","showModal","getWordsForQuiz","sort","Math","random","slice","data","setState","itemIndex","findIndex","splice","Container","Card","fluid","as","open","this","trigger","disabled","size","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf2a48c1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Button, Icon } from 'semantic-ui-react';\n\nconst ListOfWords = ({words, onRemove}) => {\n    return (\n        <Table celled striped>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Native</Table.HeaderCell>\n                    <Table.HeaderCell>Foreign</Table.HeaderCell>\n                    <Table.HeaderCell width={1} />\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {words.length === 0 && (\n                    <Table.Row>\n                        <Table.Cell colSpan={3}>There are no words in your collection. You can add them using a form above the table.</Table.Cell>\n                    </Table.Row>\n                )}\n                {words.map(word => {\n                    return (\n                        <Table.Row>\n                            <Table.Cell>{word.native}</Table.Cell>\n                            <Table.Cell>{word.foreign}</Table.Cell>\n                            <Table.Cell>\n                                <Button basic color='red' content='Red' animated='vertical' onClick={() => onRemove(word)}>\n                                    <Button.Content hidden>Remove</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='trash' />\n                                    </Button.Content>\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>\n                    )\n                })}\n\n            </Table.Body>\n            <Table.Footer>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='3'>\n                        Items: {words && words.length}\n                    </Table.HeaderCell>\n                </Table.Row>\n            </Table.Footer>\n        </Table>\n    );\n};\n\nListOfWords.propTypes = {\n    words: PropTypes.arrayOf(PropTypes.shape({\n        native: PropTypes.string.isRequired,\n        foreign: PropTypes.string.isRequired,\n    }),),\n\n    onRemove: PropTypes.func.isRequired,\n};\n\nexport default ListOfWords;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react'\n\nconst AddWord = ({onAdd}) => {\n    const [native, setNative] = useState('');\n    const [foreign, setForeign] = useState('');\n    const [nativeError, setNativeError] = useState(null);\n    const [foreignError, setForeignError] = useState(null);\n\n    const onSubmit = () => {\n        setNativeError(null);\n        setForeignError(null);\n\n        if (!native) {\n            setNativeError({ content: 'Please enter a native word', pointing: 'above' });\n\n            return;\n        }\n\n        if (!foreign) {\n            setForeignError({ content: 'Please enter a foreign word', pointing: 'above' });\n\n            return;\n        }\n\n        onAdd({\n            native,\n            foreign\n        });\n\n        setNative('');\n        setForeign('');\n    };\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Group>\n                <Form.Input\n                    error={nativeError}\n                    placeholder='Native word'\n                    name='native'\n                    value={native}\n                    onChange={(event) => setNative(event.target.value)}\n                />\n                <Form.Input\n                    error={foreignError}\n                    placeholder='Foreign word'\n                    name='foreign'\n                    value={foreign}\n                    onChange={(event) => setForeign(event.target.value)}\n                />\n                <Form.Button content='Submit' primary />\n            </Form.Group>\n        </Form>\n    );\n};\n\nAddWord.propTypes = {\n    onAdd: PropTypes.func.isRequired,\n};\n\nexport default AddWord;\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal, Table, Icon, Message, Button} from \"semantic-ui-react\";\n\nconst Summary = ({answers, onClose}) => {\n    const allCorrect = answers.every(answer => answer.foreign === answer.correct);\n\n    return (\n        <Fragment>\n            <Modal.Header>\n                {allCorrect ? 'You have pass the test!' : 'Unfortunately you did not pass the test'}\n            </Modal.Header>\n            <Modal.Content image>\n                <Modal.Description>\n                    {allCorrect && (\n                        <Message positive>\n                            <Message.Header>Congratulations!!!</Message.Header>\n                        </Message>\n                    )}\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Native</Table.HeaderCell>\n                                <Table.HeaderCell>Your Input</Table.HeaderCell>\n                                <Table.HeaderCell>Correct</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {answers.map(answer => {\n                                return (\n                                    <Table.Row positive={answer.correct === answer.foreign} negative={answer.correct !== answer.foreign} key={`table-row-${answer.native}`}>\n                                        <Table.Cell>{answer.native}</Table.Cell>\n                                        <Table.Cell>\n                                            {answer.correct === answer.foreign && (<Icon name='checkmark' />)}\n                                            {answer.foreign}\n                                        </Table.Cell>\n                                        <Table.Cell>{answer.correct}</Table.Cell>\n                                    </Table.Row>\n                                )\n                            })}\n                        </Table.Body>\n                    </Table>\n                </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button color='green' onClick={onClose}>\n                    Close\n                </Button>\n            </Modal.Actions>\n        </Fragment>\n    );\n};\n\nSummary.propTypes = {\n    answers: PropTypes.array,\n    onClose: PropTypes.func,\n};\n\nexport default Summary;\n","import React, {Fragment, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {Progress, Input, Button, Modal, Form} from 'semantic-ui-react';\nimport Summary from \"./summary\";\n\nconst Quiz = ({words, onClose}) => {\n    const [step, setStep] = useState(0);\n    const [answers, setAnswers] = useState(words.map(word => {\n        return {\n            foreign: '',\n            native: word.native,\n            correct: word.foreign,\n        }\n    }));\n\n    const displayQuestions = step < answers.length;\n\n    const setAnswerValue = (value, step) => {\n        let stateCopy = [...answers];\n        stateCopy[step].foreign = value;\n\n        setAnswers(stateCopy)\n    };\n\n    return (\n        <Fragment>\n            {displayQuestions && (\n                <Fragment>\n                    <Progress style={{marginBottom: 0}} value={step + 1} total={answers.length} progress='ratio' indicating />\n                    <Modal.Header>Please type a foreign word in an input</Modal.Header>\n                    <Modal.Content image>\n                        <Modal.Description>\n                            {displayQuestions && (\n                                <Form>\n                                    <Form.Field>\n                                        <Input\n                                            label={`${answers[step].native}: `}\n                                            name='foreign'\n                                            value={answers[step].foreign}\n                                            onChange={(event) => setAnswerValue(event.target.value, step)}\n                                        />\n                                    </Form.Field>\n                                </Form>\n                            )}\n                        </Modal.Description>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        {step < (answers.length - 1) ? (\n                            <Button color='green' onClick={() => setStep(step + 1)}>\n                                Next\n                            </Button>\n                        ) : (\n                            <Button color='green' onClick={() => setStep(step + 1)}>\n                                Submit\n                            </Button>\n                        )}\n                    </Modal.Actions>\n                </Fragment>\n            )}\n            {!displayQuestions && (\n                <Summary answers={answers} onClose={onClose} />\n            )}\n        </Fragment>\n    );\n};\n\nQuiz.propTypes = {\n    words: PropTypes.array,\n    onClose: PropTypes.func,\n};\n\nexport default Quiz;\n","import React, {Component} from 'react';\nimport { Container, Header, Button, Modal, Card } from 'semantic-ui-react'\nimport ListOfWords from \"./components/list-of-words\";\nimport AddWord from \"./components/add-word\";\nimport Quiz from \"./components/quiz\";\n\nclass App extends Component {\n    state = {\n        showModal: false,\n        words: [\n\n        ]\n    };\n\n    render() {\n        return (\n            <Container>\n                <br/><br/>\n                <Card fluid>\n                    <Card.Content>\n                        <Header as='h1'>Your Vocabulary</Header>\n                        <Modal\n                            onClose={() => this.setState({showModal: false})}\n                            open={this.state.showModal}\n                            trigger={\n                                <Button\n                                    disabled={this.state.words.length === 0}\n                                    onClick={() => this.setState({showModal: true})}\n                                    positive\n                                    size=\"large\"\n                                >\n                                    Start a new lesson\n                                </Button>\n                            }>\n                            <Quiz words={this.getWordsForQuiz()} onClose={() => this.setState({showModal: false})} />\n                        </Modal>\n                        <div>\n                            <small>It's recommended to start a test with at least 10 words</small>\n                        </div>\n                        <Header as='h3'>Add a new word</Header>\n                        <AddWord onAdd={this.onAdd} />\n                        <ListOfWords onRemove={this.onRemove} words={this.state.words} />\n                    </Card.Content>\n\n                </Card>\n\n            </Container>\n        );\n    }\n\n    getWordsForQuiz = () => {\n        let shuffled = [...this.state.words].sort(() => 0.5 - Math.random());\n\n        let selected = shuffled.slice(0, 20);\n\n        return selected;\n    };\n\n    onAdd = data => {\n        this.setState({\n            words: [...this.state.words, ...[data]]\n        });\n    };\n\n    onRemove = data => {\n        const itemIndex = this.state.words.findIndex(word => word.native === data.native);\n\n        let stateCopy = [...this.state.words];\n        stateCopy.splice(itemIndex, 1);\n\n\n        return this.setState({\n            words: stateCopy\n        })\n    };\n}\n\nApp.propTypes = {};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}